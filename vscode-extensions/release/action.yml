name: 'VS Code Extension Release'
description: 'Packages and releases a VS Code extension'
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Extract version from GitHub ref
    - name: Extract version from tag
      shell: bash
      run: |
        # Extract version from GitHub ref (e.g., refs/tags/v1.2.3 -> 1.2.3)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Using version: $VERSION"

    # Update version in package.json
    - name: Update version in package.json
      shell: bash
      run: |
        # Use jq to update the version field with the GitHub tag version
        jq ".version = \"$RELEASE_VERSION\"" package.json > package.json.tmp
        mv package.json.tmp package.json
        echo "Updated package.json to version $RELEASE_VERSION"

    - name: Cache Yarn dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          **/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies with Yarn
      shell: bash
      run: yarn install --frozen-lockfile

    - name: Install vsce
      shell: bash
      run: yarn global add vsce

    # Clean up any existing .vsix files before packaging
    - name: Clean up existing .vsix files
      shell: bash
      run: rm -f *.vsix

    - name: Package extension
      shell: bash
      run: vsce package

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: '*.vsix'
        token: ${{ github.token }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
        append_body: false
        replace_artifacts: true
